# -*- coding: utf-8 -*-
"""Model_Predict_Fruit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZNv3k20lARqFIOjmiF-f3Qgps95IBAbs
"""

!pip uninstall -y tensorflow keras
!pip install tensorflow==2.15.0 keras==2.15.0

# Link Google Drive to access model and image files stored there
from google.colab import drive
drive.mount('/content/drive')

# Import necessary Libraries
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import os

# The Path of Folder in Google Drive
folder = '/content/drive/MyDrive/converted_keras'

model_path = os.path.join(folder, 'keras_model.h5')
labels_path = os.path.join(folder, 'labels.txt')

image_names = ['apple_test.jpg', 'banana_test.jpg']

# Load the model
model = load_model(model_path)

# Load the labels
with open(labels_path, 'r') as f:
    class_names = [line.strip() for line in f.readlines()]
print("Class labels:", class_names)

# Function to load and preprocess an image
def load_and_preprocess_image(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    return img, img_array

# Loop through each image and make prediction
for img_name in image_names:
    img_path = os.path.join(folder, img_name)
    img, input_array = load_and_preprocess_image(img_path)

    prediction = model.predict(input_array)
    predicted_index = np.argmax(prediction[0])
    predicted_label = class_names[predicted_index]
    confidence = prediction[0][predicted_index] * 100

    print(f"\n Image: {img_name}")
    print(f" Prediction: {predicted_label}")
    print(f" Confidence: {confidence:.2f}%")

# Show the image with the prediction
    plt.imshow(img)
    plt.axis('off')
    plt.title(f"{img_name} - {predicted_label} ({confidence:.2f}%)")
    plt.show()

# Print all class probabilities
    print("\nPrediction breakdown:")
    for i, score in enumerate(prediction[0]):
        print(f"{class_names[i]}: {score * 100:.2f}%")

    print("\n" + "-"*55 + "\n")